/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/mCtmCe7FEgQ
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { DM_Sans } from 'next/font/google'
import { Rethink_Sans } from 'next/font/google'

dm_sans({
  subsets: ['latin'],
  display: 'swap',
})

rethink_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"

export function Details({data}) {

  if(!data){
    return ("No endpoint exists")
  }

  const stat = JSON.parse(data['testResults'])
  console.log(stat[stat.length - 1])
  const finStat = stat[stat.length - 1]['status'].toUpperCase()
  console.log(finStat)
  const time = stat[stat.length - 1]['created_time']
  var d = new Date(0); // The 0 there is the key, which sets the date to the epoch
  d.setUTCSeconds(parseInt(time));

  let responses = data['responses']

  let job = JSON.parse(responses)
  job = JSON.stringify(job, null, 4)

  // console.log(data)

  let req = data['requestBody']
  let jb = ""
  if(req == undefined){
    jb = "No req body required"
  }else{
    jb = JSON.parse(req)
    jb = JSON.stringify(jb, null, 4)
  }
  
  let results = JSON.parse(data['testResults'])

  return (
    (<div className="flex flex-col min-h-screen bg-muted/40">
      <header className="bg-background border-b px-4 sm:px-6 flex items-center h-16">
        <div className="flex items-center gap-2">
          <GarudaIcon className="w-6 h-6" />
          <h1 className="text-lg font-semibold"><a href="/">Garuda</a></h1>
        </div>
        <p className="ml-4 text-muted-foreground text-sm">Manage and monitor all your API endpoints.</p>
      </header>
      <main className="flex-1 grid gap-8 p-4 sm:p-6 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>API Details</CardTitle>
          </CardHeader>
          <CardContent className="grid gap-6">
            <div>
              <h3 className="text-lg font-medium">Endpoint</h3>
              <p className="text-muted-foreground">http://localhost:5000{data['path']}</p>
            </div>
            <div>
              <h3 className="text-lg font-medium">Current Status</h3>
              <div className="flex items-center gap-2">
                <Badge variant="secondary" className="bg-green-400">
                  {finStat}
                </Badge>
              </div>
            </div>
            <div>
              <h3 className="text-lg font-medium">Description</h3>
              <div className="flex items-center gap-2">
                  <p>{data['description']}</p>
              </div>
            </div>
            <div>
              <h3 className="text-lg font-medium">Request Model - {data['reqType'].toUpperCase()}</h3>
              <pre className="bg-background p-4 rounded-md text-sm">{jb}</pre>
            </div>
            <div>
              <h3 className="text-lg font-medium">Response Model</h3>
              <pre className="bg-background p-4 rounded-md text-sm text-wrap">{
                job}</pre>
            </div>
            
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Vulnerability Testing History</CardTitle>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Date</TableHead>
                  <TableHead>Vulnerabilities</TableHead>
                  <TableHead>Status</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                
                {
                  results.map((res) => {
                    console.log(res)
                    return(
                      <TableRow>
                        <TableCell>{d.toISOString().substring(0, 10)}</TableCell>
                        <TableCell>
                          <ul className="space-y-1">
                            <li>{res['status'] == "ok"? "No Vulnerabilities detected": res['status']}</li>
                          </ul>
                        </TableCell>
                        <TableCell>
                        <Badge variant="outline" className="bg-yellow-400">
                          {res['status'].toUpperCase()}
                          </Badge>
                        </TableCell>
                      </TableRow>
                    )
                  })
                }

<TableRow>
                  <TableCell>2023-04-15</TableCell>
                  <TableCell>
                    <ul className="space-y-1">
                      <li>Cross-Site Scripting (XSS)</li>
                      <li>SQL Injection</li>
                    </ul>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline" className="bg-yellow-400">
                      In Progress
                    </Badge>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>2023-02-28</TableCell>
                  <TableCell>
                    <ul className="space-y-1">
                      <li>Broken Authentication</li>
                    </ul>
                  </TableCell>
                  <TableCell>
                    <Badge variant="secondary" className="bg-green-400">
                      Resolved
                    </Badge>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>2022-11-10</TableCell>
                  <TableCell>
                    <ul className="space-y-1">
                      <li>Sensitive Data Exposure</li>
                      <li>Insecure Direct Object References</li>
                    </ul>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline" className="bg-red-400">
                      Unresolved
                    </Badge>
                  </TableCell>
                </TableRow>

              </TableBody>
            </Table>
          </CardContent>
        </Card>
      </main>
    </div>)
  );
}

function PiIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <line x1="9" x2="9" y1="4" y2="20" />
      <path d="M4 7c0-1.7 1.3-3 3-3h13" />
      <path d="M18 20c-1.7 0-3-1.3-3-3V4" />
    </svg>)
  );
}

function GarudaIcon() {
  return (
    (<img src="https://i.ibb.co/wc49JVH/Firefly-garuda-logo-minimal-sharp-eagle-sharper-eyes-protecting-in-darkness-only-border-shine-g-1-re.png" width="8%"/>));
}
