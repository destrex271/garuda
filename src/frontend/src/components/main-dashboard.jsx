/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/nPayk81XNqJ
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { DM_Sans } from 'next/font/google'
import { Rethink_Sans } from 'next/font/google'

dm_sans({
  subsets: ['latin'],
  display: 'swap',
})

rethink_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"


export function MainDashboard({data}) {
  return (
    (<div className="flex flex-col min-h-screen bg-muted/40">
      <header className="bg-background border-b px-4 sm:px-6 flex items-center h-16">
        <div className="flex items-center gap-2">
          <GarudaIcon className="w-6 h-6" />
          <h1 className="text-lg font-semibold"><a href="/">Garuda</a></h1>
        </div>
        <p className="ml-4 text-muted-foreground text-sm">Manage and monitor all your API endpoints.</p>
      </header>
      <main className="flex-1 p-4 sm:p-6">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>API</TableHead>
              <TableHead>Latest Status</TableHead>
              <TableHead>Endpoint</TableHead>
              <TableHead>Last Tested </TableHead>
              <TableHead>View </TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.map((dt, id) => {
              let stat = [];
              try {
                  stat = JSON.parse(dt['testResults']);
              } catch (e) {
                  console.error("Failed to parse 'testResults' for entry:", dt);
                  return(<TableRow>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <PiIcon className="w-4 h-4" />
                        <span>{dt["name"]} - {dt["reqType"].toUpperCase()}</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Badge variant="secondary" className="bg-green-400">
                          No Tests Performed
                        </Badge>
                        <p className="text-muted-foreground">{dt['description']}</p>
                      </div>
                    </TableCell>
                    <TableCell>
                      <p className="text-muted-foreground">https://localhost:5000/{dt["path"]}</p>
                    </TableCell>
                    <TableCell>
                      <p className="text-muted-foreground">No Tests Conducted Yet</p>
                    </TableCell>
                    <TableCell>
                      <a href={`/${dt['id']}`} className="px-2">View</a>
                      <a href={`/configure/${dt['id']}`}>Configure</a>
                    </TableCell>
                  </TableRow>); // Skip this entry if parsing fails
              }
          
              // Check if 'stat' is an array and has elements
              if (!Array.isArray(stat) || stat.length === 0) {
                  console.log("Skipping empty or invalid 'testResults' for entry:", dt);
                  return(<TableRow>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <PiIcon className="w-4 h-4" />
                        <span>{dt["name"]} - {dt["reqType"].toUpperCase()}</span>
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Badge variant="secondary" className="bg-green-400">
                        No Tests Performed
                        </Badge>
                        <p className="text-muted-foreground">{dt['description']}</p>
                      </div>
                    </TableCell>
                    <TableCell>
                      <p className="text-muted-foreground">https://localhost:5000/{dt["path"]}</p>
                    </TableCell>
                    <TableCell>
                      <p className="text-muted-foreground">No Tests Conducted Yet</p>
                    </TableCell>
                    <TableCell>
                      <a href={`/${dt['id']}`} className="px-2">View</a>
                      <a href={`/configure/${dt['id']}`}>Configure</a>
                    </TableCell>
                  </TableRow>);// Skip this entry if 'testResults' is empty or not an array
              }
               const finStat = stat[stat.length - 1]['status'].toUpperCase()
               console.log(finStat)
               const time = stat[stat.length - 1]['created_time']
               var d = new Date(0); // The 0 there is the key, which sets the date to the epoch
               d.setUTCSeconds(parseInt(time));
              return (<TableRow>
                <TableCell>
                  <div className="flex items-center gap-2">
                    <PiIcon className="w-4 h-4" />
                    <span>{dt["name"]} - {dt["reqType"].toUpperCase()}</span>
                  </div>
                </TableCell>
                <TableCell>
                  <div className="flex items-center gap-2">
                    <Badge variant="secondary" className="bg-green-400">
                    {finStat}
                    </Badge>
                    <p className="text-muted-foreground">{dt['description']}</p>
                  </div>
                </TableCell>
                <TableCell>
                  <p className="text-muted-foreground">https://localhost:5000/{dt["path"]}</p>
                </TableCell>
                <TableCell>
                  <p className="text-muted-foreground">{d.toDateString() + " " + d.toTimeString()}</p>
                </TableCell>
                <TableCell>
                  <a href={`/${dt['id']}`} className="px-2">View</a>
                  <a href={`/configure/${dt['id']}`}>Configure</a>
                </TableCell>
              </TableRow>)
              })
            }
          </TableBody>
        </Table>
      </main>
    </div>)
  );
}

function PiIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <line x1="9" x2="9" y1="4" y2="20" />
      <path d="M4 7c0-1.7 1.3-3 3-3h13" />
      <path d="M18 20c-1.7 0-3-1.3-3-3V4" />
    </svg>)
  );
}


function GarudaIcon() {
  return (
    (<img src="https://i.ibb.co/wc49JVH/Firefly-garuda-logo-minimal-sharp-eagle-sharper-eyes-protecting-in-darkness-only-border-shine-g-1-re.png" width="8%"/>));
}
